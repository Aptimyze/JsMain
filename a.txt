diff --git a/lib/model/lib/api/ApiAuthentication.class.php b/lib/model/lib/api/ApiAuthentication.class.php
index 7642ca8..00d882f 100644
--- a/lib/model/lib/api/ApiAuthentication.class.php
+++ b/lib/model/lib/api/ApiAuthentication.class.php
@@ -1,10 +1,8 @@
 <?php
 Abstract class ApiAuthentication
 {
-	public static $recentUserEntry="RECENT_USER_ENTRY";
-	public static $loginHistory="LOGIN_HISTORY";
 	public static $loginTracking="LOGIN_TRACKING";	
-        private $request;
+    private $request;
 	protected $encryptSeprator="______";
 	protected $_KEY = "Radhe Shaam";
     protected $_SUBKEY = "muhaafiz Khudi ke";
@@ -33,7 +31,17 @@ Abstract class ApiAuthentication
 	private $dateTime2 ='22';
 	private $expiryTime = 2592000;
 	public $mailerProfileId;
-	
+
+	private $logLoginHistoryTracking=false;
+	private $recentUserTracking=false;
+	private $misLoginTracking=false;
+	private $appLoginProfileTracking=false;
+	private $logLogoutTracking=false;
+	private $recentLogTracking=false;
+	private $channel='R';
+	private $directLogin=false;
+	private $loc="";
+
 	public function __construct($request)
 	{
 		$this->request=$request;
@@ -61,11 +69,9 @@ Abstract class ApiAuthentication
 					//What about archived users.
 					//What about tracking
 					
-					if($loginData[ACTIVATED]<>'D' && $this->trackLogin)
-					{
-						$this->insert_into_login_history($loginData["PROFILEID"]);
-					}
-				
+					
+					$this->directLogin=true;
+					$this->channel='D';
 					$this->loginData=$loginData;
 					if($this->isNotApp && $this->loginData[PROFILEID] && $this->loginData["GENDER"]=="")
 						return $this->loginData;
@@ -94,15 +100,13 @@ Abstract class ApiAuthentication
 						$this->loginData[AUTHCHECKSUM]=$this->encryptAppendTime($this->createAuthChecksum());
 						if($this->trackLogin)
 						{
-							$this->RecentUserEntry();
-							$this->loginTracking($this->loginData[PROFILEID],"D",MobileCommon::isApp());
+							$this->logLoginHistoryTracking=true;
+							$this->recentUserTracking=true;
+							$this->misLoginTracking=true;
 						}
 						//appPromotion off for already installed users
 						if(!$this->isNotApp)
-						{
-							$dbAppLoginProfiles=new MOBILE_API_APP_LOGIN_PROFILES();
-							$appProfileId=$dbAppLoginProfiles->insertAppLoginProfile($this->loginData[PROFILEID]);
-						}
+							$this->appLoginProfileTracking=true;
 					}
 			
 					if($this->loginData)
@@ -113,7 +117,7 @@ Abstract class ApiAuthentication
 							$this->rememberMe=0;
 						$this->setcookies($this->loginData,$email,$password);
 					}
-					//CommonUtility::sendtoRabbitMq($loginData[PROFILEID]);
+					$this->completeLoginTracking();
 					return $this->loginData;
 				}
 			}
@@ -128,10 +132,10 @@ Abstract class ApiAuthentication
 	*/
 	public function logout($profileId)	//to be changed in connect_auth.inc
 	{
-		$this->removeRecentLog($profileId);
+		$this->recentLogTracking=true;
 		$this->removeLoginCookies();
-		$dbObj = new LOG_LOGOUT_HISTORY(JsDbSharding::getShardNo($profileId));
-		$dbObj->insert($profileId,CommonFunction::getIP());
+		$this->logLogoutTracking=true;
+		$this->completeLoginTracking();
 	}
 
 	
@@ -176,14 +180,13 @@ Abstract class ApiAuthentication
 				return $this->loginData;
 			}
 			else
-                    		$this->loginData=$this->IsAlive($loginData,$gcm);
+                $this->loginData=$this->IsAlive($loginData,$gcm);
 
 			if($this->loginData)
 			{
 				if($this->trackLogin)
 				{
 					$this->loginData[AUTHCHECKSUM]=$this->encryptAppendTime($this->createAuthChecksum());
-					$this->RecentUserEntry();
 				}
 				else
 					$this->loginData[AUTHCHECKSUM]=$authChecksum;
@@ -198,9 +201,10 @@ Abstract class ApiAuthentication
 				if($this->isNotApp)
 				{
 					$this->removeLoginCookies();
-					$this->removeRecentLog($loginData[PROFILEID]);
+					$this->recentLogTracking=false;
 				}
 			}
+			$this->completeLoginTracking();
 			return $this->loginData;
 		}
 		return false;
@@ -255,11 +259,12 @@ Abstract class ApiAuthentication
 				//CommonUtility::sendtoRabbitMq($loginData[PROFILEID]);
 				if($this->rememberMe)
 				{
-					$this->insert_into_login_history($loginData["PROFILEID"]);
+					$this->logLoginHistoryTracking=true;
+					$this->misLoginTracking=true;
 					if($gcm)
-						$this->loginTracking($loginData[PROFILEID],"G",MobileCommon::isApp());
+						$this->channel='G';
 					else
-						$this->loginTracking($loginData[PROFILEID],"R",MobileCommon::isApp());
+						$this->channel='R';
 				}
 				else
 				{
@@ -269,10 +274,11 @@ Abstract class ApiAuthentication
 				}
 			}
 			else if($gcm){
-
-				$this->loginTracking($this->loginData[PROFILEID],"G",MobileCommon::isApp());
+				$this->misLoginTracking=true;
+				$this->gcm=true;
 			}
-
+			if($this->trackLogin)
+				$this->recentUserTracking=true;
 			$loginData["EMAIL"]=$loggedInProfileObj->getEMAIL();
 			$loginData["PHONE_MOB"]=$loggedInProfileObj->getPHONE_MOB();
             $loginData["ACTIVATED"]=$loggedInProfileObj->getACTIVATED();
@@ -284,67 +290,91 @@ Abstract class ApiAuthentication
 		return null;
 	}
      
-     
-	/*
-	* @function: loginTracking
-	* track all logins in login_tracking table
-	* @param int profileid,char channel,char website version
-	*/
-	public function loginTracking($profileId,$channel,$websiteVersion,$location="")
+    public function CommonLoginTracking()
 	{
-                if(!$websiteVersion)
-		{
-			if($this->isNotApp){
-				if($this->isNewMobileSite){
-					$websiteVersion="N";
-					if(MobileCommon::isAppWebView()){
-						$websiteVersion="A";
+		$queueArr['profileId']=$this->loginData["PROFILEID"];
+		$profileId=$this->loginData["PROFILEID"];
+		$ip=CommonFunction::getIP();
+		$queueArr['ip']=$ip;
+
+		if($this->misLoginTracking){
+			$websiteVersion=MobileCommon::isApp();
+	        if(!$websiteVersion)
+			{
+				if($this->isNotApp){
+					if($this->isNewMobileSite){
+						$websiteVersion="N";
+						if(MobileCommon::isAppWebView()){
+							$websiteVersion="A";
+						}
 					}
+					elseif(MobileCommon::isDesktop())
+						$websiteVersion="D";				
 				}
-				elseif(MobileCommon::isDesktop())
-					$websiteVersion="D";				
 			}
-		}
-
-                $body = array('profileId'=>$profileId,'channel'=>$channel,'websiteVersion'=>$websiteVersion,'location'=>$location,'reqUri'=>$_SERVER[REQUEST_URI]);
-                if($this->sendLoggingDataQueue(self::$loginTracking, $body))return;
-		include_once(sfConfig::get("sf_web_dir")."/classes/LoginTracking.class.php");
-		$loginTracking= LoginTracking::getInstance($profileId);
-		$loginTracking->setChannel($channel);
-		$loginTracking->setWebisteVersion($websiteVersion);
-		
-		if(!$location)
-		{
-			if(sfContext::getInstance()->getRequest()->getParameter('link_id') && strpos($_SERVER[REQUEST_URI],"/e/")!==false){
-				$link=LinkFactory::getLink(sfContext::getInstance()->getRequest()->getParameter('link_id'));
-				$request_uri=$link->getLinkAddress();
+			$location=$this->loc;
+			if(!$location)
+			{
+				if(sfContext::getInstance()->getRequest()->getParameter('link_id') && strpos($_SERVER[REQUEST_URI],"/e/")!==false){
+					$link=LinkFactory::getLink(sfContext::getInstance()->getRequest()->getParameter('link_id'));
+					$request_uri=$link->getLinkAddress();
+				}
+				else
+					$request_uri=$_SERVER[REQUEST_URI];
+				$page=explode('?',$request_uri);
+				$page=$page[0];
+				$page=explode('/',$page);
+				$no=count($page);
+				$page=$page[$no-1];
 			}
 			else
-				$request_uri=$_SERVER[REQUEST_URI];
-			$page=explode('?',$request_uri);
-			$page=$page[0];
-			$page=explode('/',$page);
-			$no=count($page);
-			$page=$page[$no-1];
+			{
+				if($location)
+					$request_uri=$location;			
+				$request_uri=str_replace("CMGFRMMMMJS=","pass=",$request_uri);
+				$request_uri=str_replace("&echecksum=","&autologin=",$request_uri);
+				$request_uri=str_replace("?echecksum=","?autologin=",$request_uri);
+				$request_uri=str_replace("&checksum=","&chksum=",$request_uri);
+				$request_uri=str_replace("?checksum=","?ckhsum=",$request_uri);
+				$request_uri=str_replace(urlencode($echecksum),"",$request_uri);
+				$request_uri=str_replace($echecksum,"",$request_uri);
+				$request_uri=ltrim($request_uri,"/");
+				$page=$request_uri;
+			}
+			//$this->loginTracking($this->loginData["PROFILEID"],$websiteVersion,$this->channel,$page);
+			
+			$queueArr['websiteVersion']=$websiteVersion;
+			$queueArr['channel']=$this->channel;
+			$queueArr['page']=$page;
+			$queueArr['misLoginTracking']=true;
 		}
-		else
+		
+		if($this->logLoginHistoryTracking){	
+			$queueArr['logLoginHistoryTracking']=true;
+		}
+
+        if($this->appLoginProfileTracking)
 		{
-			if($location)
-				$request_uri=$location;			
-			$request_uri=str_replace("CMGFRMMMMJS=","pass=",$request_uri);
-			$request_uri=str_replace("&echecksum=","&autologin=",$request_uri);
-			$request_uri=str_replace("?echecksum=","?autologin=",$request_uri);
-			$request_uri=str_replace("&checksum=","&chksum=",$request_uri);
-			$request_uri=str_replace("?checksum=","?ckhsum=",$request_uri);
-			$request_uri=str_replace(urlencode($echecksum),"",$request_uri);
-			$request_uri=str_replace($echecksum,"",$request_uri);
-			$request_uri=ltrim($request_uri,"/");
-			$page=$request_uri;
+			$queueArr['appLoginProfileTracking']=true;
+			
+		}
+		if($this->logLogoutTracking){
+			$queueArr['logLogoutTracking']=true;
 		}
-			$loginTracking->setRequestURI($page);
-		$loginTracking->loginTracking();
+
+		if($this->recentUserTracking)
+			$this->RecentUserEntry();
+		
+		if($this->recentLogTracking)
+			$this->removeRecentLog();
+        
+        if($this->sendLoggingDataQueue(self::$loginTracking, $queueArr))return;
+        else
+        	CompleteLoginTracking::completeLoginTracking($queueArr);
+		
 	}
 	
+	
 	/*
 	* @function: getAuthChecksumFromAuth
 	* create authchecksum from auth cookie
@@ -469,8 +499,8 @@ Abstract class ApiAuthentication
 		if(is_numeric($pid))
 		{
 			if(!$this->isMobile){
-				$dbObj=new userplane_recentusers;
-				$dbObj->DeleteRecord($pid);
+				//$dbObj=new userplane_recentusers;
+				//$dbObj->DeleteRecord($pid);
 			}
 			
 			// Remove Online-User
@@ -484,43 +514,7 @@ Abstract class ApiAuthentication
 			}
 		}
 	}	
-    /*
-	* @function: insert_into_login_history
-	* Inert data into Login History tables for tracking login info
-	* @param int profileID
-	*/        
-	public function insert_into_login_history($profileID)
-	{	
-                $ip=CommonFunction::getIP();
-                $body=array('IP'=>$ip,'profileId'=>$profileID);
-		if($this->sendLoggingDataQueue(self::$loginHistory, $body))return ;
-		$dbName = JsDbSharding::getShardNo($profileID);
-		//Insert Into LOG_LOGIN_HISTORY
-		$dbLogLoginHistory=new NEWJS_LOG_LOGIN_HISTORY($dbName);
-		$dbLogLoginHistory->insertIntoLogLoginHistory($profileID,$ip);
-		
-		//Insert Ignore Into LOGIN_HISTORY 
-		$dbLoginHistory= new NEWJS_LOGIN_HISTORY($dbName);
-		$insert=$dbLoginHistory->insertIntoLoginHistory($profileID);
-		//if exist then update
-		if(!$insert)
-		{
-			//if exist then update  newjs.LOGIN_HISTORY_COUNT
-			$dbLoginHistoryCount= new NEWJS_LOGIN_HISTORY_COUNT($dbName);
-			$update=$dbLoginHistoryCount->updateLoginHistoryCount($profileID);
-            
-            //If No Update then replace
-            if(!$update)
-			$dbLoginHistoryCount->replaceLoginHistoryCount($profileID);
-		}
-		//update Jprofile LAST_LOGIN_DT
-		if(sfContext::getInstance()->getRequest()->getParameter('searchRepConn'))
-				$dbJprofile=new JPROFILE("newjs_masterRep");
-			else
-				$dbJprofile=new JPROFILE("newjs_master");
-		$dbJprofile->updateLoginSortDate($profileID);
-
-	}
+    
 
 	/** Update recent users entry, required to trap in online users
 	*/
@@ -545,19 +539,12 @@ Abstract class ApiAuthentication
 			@setcookie("LOGUSERENTRY",time(),0,"/",$this->domain);
 		}
 
-		$type=self::$recentUserEntry;
-		$body = array('isMobile'=>$this->isMobile,'profileId'=>$this->loginData[PROFILEID],'dateTime1'=>$this->dateTime1,'dateTime2'=>$this->dateTime2);
-		if($this->sendLoggingDataQueue($type,$body))return;
 		$allow=1;
 		$pid=intval($this->loginData[PROFILEID]);
 		if($allow && $pid && !$this->isMobile)
 		{
-			if(sfContext::getInstance()->getRequest()->getParameter('searchRepConn'))
-				$dbObj=new userplane_recentusers("newjs_masterRep");
-			else
-				$dbObj=new userplane_recentusers("newjs_master");
-			$dbObj->replacedata($pid);
-
+			//$dbObj=new userplane_recentusers("newjs_master");
+			//$dbObj->replacedata($pid);
 		}
 
 		// Add Online-User
diff --git a/lib/model/lib/api/mobileApi/WebAuthentication.class.php b/lib/model/lib/api/mobileApi/WebAuthentication.class.php
index 06fe592..b41324c 100644
--- a/lib/model/lib/api/mobileApi/WebAuthentication.class.php
+++ b/lib/model/lib/api/mobileApi/WebAuthentication.class.php
@@ -56,9 +56,6 @@ class WebAuthentication extends ApiAuthentication
 			$epid_arr=explode("i",$checksum);
 			$profileid=$epid_arr[1];
 			$this->mailerProfileId=$profileid;
-			//if(!$this->authenticate(null,0,'Y')){
-			//print_r(sfContext::getInstance()->getRequest()->getAttribute("profileid"));die;
-			//echo ['profileid'];die;
 			if(sfContext::getInstance()->getRequest()->getAttribute('profileid')!=$this->mailerProfileId){
 			//echo "ASD";die;
 			$dbJprofile=new JPROFILE();
@@ -66,14 +63,18 @@ class WebAuthentication extends ApiAuthentication
 			$paramArr='PROFILEID,DTOFBIRTH,SUBSCRIPTION,SUBSCRIPTION_EXPIRY_DT,USERNAME,GENDER,ACTIVATED,SOURCE,LAST_LOGIN_DT,CASTE,MTONGUE,INCOME,RELIGION,AGE,HEIGHT,HAVEPHOTO,INCOMPLETE,MOD_DT,COUNTRY_RES,PASSWORD,PHONE_MOB,EMAIL';
 				
 			$this->loginData=$dbJprofile->get($profileid,"PROFILEID",$paramArr);
-			$this->RecentUserEntry();
-			$this->insert_into_login_history($this->loginData["PROFILEID"]);
-                        
-                        if(strpos($loc,"linkFromSMS")!==false) // for autologin from sms 
-                            $channel='S';
-                        else 
-                            $channel='M';
-			$this->loginTracking($this->loginData[PROFILEID],$channel,'',$loc);			
+			
+			
+			if(strpos($loc,"linkFromSMS")!==false) // for autologin from sms 
+                $this->channel='S';
+            else 
+                $this->channel='M';
+            $this->misLoginTracking=true;
+            $this->recentUserTracking=true;
+            $this->logLoginHistoryTracking=true;
+            $this->loc=$loc;
+			$this->completeLoginTracking();
+
 			$this->loginData[AUTHCHECKSUM]=$this->encryptAppendTime($this->createAuthChecksum());
 			$this->removeLoginCookies();
 			$this->setcookies($this->loginData,'','');
diff --git a/lib/model/lib/commonTracking.class.php b/lib/model/lib/commonTracking.class.php
index 7fdf871..b0e7f72 100644
--- a/lib/model/lib/commonTracking.class.php
+++ b/lib/model/lib/commonTracking.class.php
@@ -1,100 +1,60 @@
 <?php
 
-class commonTracking {
+class CommonLoginTracking {
     
     
     
     
     	/** Update recent users entry, required to trap in online users
 	*/
-	public static function logRecentUserEntry($profileId,$isMobile,$dateTime1,$dateTime2)
+	public static function completeLoginTracking($trackingData)
 	{
-		$allow=1;
-		$pid=intval($profileId);
-		if($allow && $pid && !$isMobile)
+		$profileId=$trackingData["profileId"];
+		$ip=CommonFunction::getIP();
+		$queueArr['ip']=$ip;
+		if($trackingData[misLoginTracking])
 		{
-                        $dbObj=new userplane_recentusers("newjs_master");
-			$dbObj->replacedata($pid);
-
-		}
-
-		// Add Online-User
-		$dateTime =date("H");
-		$redisOnline =true;
-		if(($dateTime>=$dateTime1) && ($dateTime<$dateTime2))
-			$redisOnline =false;
-		if($pid && $allow && $redisOnline)
-		{
-			$jsCommonObj =new JsCommon();
-			$jsCommonObj->setOnlineUser($pid);
+			include_once(sfConfig::get("sf_web_dir")."/classes/LoginTracking.class.php");
+			$loginTracking= LoginTracking::getInstance($profileId);
+			$loginTracking->setChannel($trackingData["channel"]);
+			$loginTracking->setWebisteVersion($trackingData["websiteVersion"]);
+			$loginTracking->setRequestURI($trackingData["page"]);
+			$loginTracking->loginTracking();
 		}
-
-	}
-
-        public static function insert_into_login_history($profileID,$ip){
-            		$dbName = JsDbSharding::getShardNo($profileID);
-		//Insert Into LOG_LOGIN_HISTORY
-		$dbLogLoginHistory=new NEWJS_LOG_LOGIN_HISTORY($dbName);
-		$dbLogLoginHistory->insertIntoLogLoginHistory($profileID,$ip);
-		
-		//Insert Ignore Into LOGIN_HISTORY 
-		$dbLoginHistory= new NEWJS_LOGIN_HISTORY($dbName);
-		$insert=$dbLoginHistory->insertIntoLoginHistory($profileID);
-		//if exist then update
-		if(!$insert)
+		if($trackingData[logLoginHistoryTracking])
 		{
-			//if exist then update  newjs.LOGIN_HISTORY_COUNT
-			$dbLoginHistoryCount= new NEWJS_LOGIN_HISTORY_COUNT($dbName);
-			$update=$dbLoginHistoryCount->updateLoginHistoryCount($profileID);
-            
-            //If No Update then replace
-            if(!$update)
-			$dbLoginHistoryCount->replaceLoginHistoryCount($profileID);
+			$dbName = JsDbSharding::getShardNo($profileId);
+			//Insert Into LOG_LOGIN_HISTORY
+			$dbLogLoginHistory=new NEWJS_LOG_LOGIN_HISTORY($dbName);
+			$dbLogLoginHistory->insertIntoLogLoginHistory($profileId,$ip);
+			
+			//Insert Ignore Into LOGIN_HISTORY 
+			$dbLoginHistory= new NEWJS_LOGIN_HISTORY($dbName);
+			$insert=$dbLoginHistory->insertIntoLoginHistory($profileId);
+			//if exist then update
+			if(!$insert)
+			{
+				//if exist then update  newjs.LOGIN_HISTORY_COUNT
+				$dbLoginHistoryCount= new NEWJS_LOGIN_HISTORY_COUNT($dbName);
+				$update=$dbLoginHistoryCount->updateLoginHistoryCount($profileId);
+	            if(!$update)
+				$dbLoginHistoryCount->replaceLoginHistoryCount($profileId);
+			}
+			$dbJprofile=new JPROFILE("newjs_master");
+			$dbJprofile->updateLoginSortDate($profileId);
 		}
-		//update Jprofile LAST_LOGIN_DT
-		$dbJprofile=new JPROFILE("newjs_master");
-		$dbJprofile->updateLoginSortDate($profileID);
-        }
-
-	public static function loginTracking($profileId,$channel,$websiteVersion,$location="",$reqUri)
-	{
-		include_once(sfConfig::get("sf_web_dir")."/classes/LoginTracking.class.php");
-		$loginTracking= LoginTracking::getInstance($profileId);
-		$loginTracking->setChannel($channel);
-		$loginTracking->setWebisteVersion($websiteVersion);
-		
-		if(!$location)
+		if($trackingData["appLoginProfileTracking"])
 		{
-			if(sfContext::getInstance()->getRequest()->getParameter('link_id') && strpos($_SERVER[REQUEST_URI],"/e/")!==false){
-				$link=LinkFactory::getLink(sfContext::getInstance()->getRequest()->getParameter('link_id'));
-				$request_uri=$link->getLinkAddress();
-			}
-			else
-				$request_uri=$reqUri;
-			$page=explode('?',$request_uri);
-			$page=$page[0];
-			$page=explode('/',$page);
-			$no=count($page);
-			$page=$page[$no-1];
+			$dbAppLoginProfiles=new MOBILE_API_APP_LOGIN_PROFILES();
+			$appProfileId=$dbAppLoginProfiles->insertAppLoginProfile($profileId);
 		}
-		else
+		if($trackingData["logLogoutTracking"])
 		{
-			if($location)
-				$request_uri=$location;			
-			$request_uri=str_replace("CMGFRMMMMJS=","pass=",$request_uri);
-			$request_uri=str_replace("&echecksum=","&autologin=",$request_uri);
-			$request_uri=str_replace("?echecksum=","?autologin=",$request_uri);
-			$request_uri=str_replace("&checksum=","&chksum=",$request_uri);
-			$request_uri=str_replace("?checksum=","?ckhsum=",$request_uri);
-			$request_uri=str_replace(urlencode($echecksum),"",$request_uri);
-			$request_uri=str_replace($echecksum,"",$request_uri);
-			$request_uri=ltrim($request_uri,"/");
-			$page=$request_uri;
+			$dbObj = new LOG_LOGOUT_HISTORY(JsDbSharding::getShardNo($profileId));
+			$dbObj->insert($profileId,$ip);
 		}
-			$loginTracking->setRequestURI($page);
-		$loginTracking->loginTracking();
-	}
 
+	}
     
     
     
diff --git a/lib/model/lib/rabbitmq/LoggingConsumer.class.php b/lib/model/lib/rabbitmq/LoggingConsumer.class.php
index 2faeea6..b25b963 100644
--- a/lib/model/lib/rabbitmq/LoggingConsumer.class.php
+++ b/lib/model/lib/rabbitmq/LoggingConsumer.class.php
@@ -127,22 +127,9 @@ class LoggingConsumer
     $body=$msgdata['data']['body'];
     try
     {
-      switch($type)
-      {
-	case ApiAuthentication::$recentUserEntry:
-            commonTracking::logRecentUserEntry($body['profileId'],$body['isMobile'],$body['dateTime1'],$body['dateTime2']);
-        break;
-	
-        case ApiAuthentication::$loginHistory:
-            commonTracking::insert_into_login_history($body['profileId'], $body['IP']);
-        break;
-	
-        case ApiAuthentication::$loginTracking:
-            commonTracking::loginTracking($body['profileId'],$body['channel'], $body['websiteVersion'], $body['location'],$body['reqUri']);
-        break;
-        
+        commonTracking::completeLoginTracking($body);
     }     
-    }
+    
     catch (Exception $exception) 
     {
       $str="\nRabbitMQ Error in consumer, Unable to process message: " .$exception->getMessage()."\tLine:".__LINE__;
